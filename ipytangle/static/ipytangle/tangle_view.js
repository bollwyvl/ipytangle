// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["underscore", "jquery", "./lib/d3/d3.js", "./lib/rangy/rangy-core.js", "widgets/js/widget", "base/js/events", "base/js/namespace"], function(_, $, d3, rangy, widget, events, IPython) {
    var $win, TangleView;
    $win = $(window);
    return {
      TangleView: TangleView = (function(superClass) {
        extend(TangleView, superClass);

        function TangleView() {
          this.initVariable = bind(this.initVariable, this);
          this.updateVariable = bind(this.updateVariable, this);
          this.initIf = bind(this.initIf, this);
          this.getStackMatch = bind(this.getStackMatch, this);
          this.updateIf = bind(this.updateIf, this);
          this.updateEndIf = bind(this.updateEndIf, this);
          this.initEndIf = bind(this.initEndIf, this);
          this.updateOutput = bind(this.updateOutput, this);
          this.initOutput = bind(this.initOutput, this);
          this.onMarkdown = bind(this.onMarkdown, this);
          return TangleView.__super__.constructor.apply(this, arguments);
        }

        TangleView.prototype.EVT = {
          MD: "rendered.MarkdownCell"
        };

        TangleView.prototype.RE_INTERPOLATE = /\{\{(.+?)\}\}/g;

        TangleView.prototype.render = function() {
          this.templates = {};
          events.on(this.EVT.MD, this.onMarkdown);
          return TangleView.__super__.render.apply(this, arguments);
        };

        TangleView.prototype.remove = function() {
          events.off(this.EVT.MD, this.onMarkdown);
          return TangleView.__super__.remove.apply(this, arguments);
        };

        TangleView.prototype.nodeToConfig = function(el) {
          "implements the ipytangle URL minilanguage\n- `:` a pure output view\n- `<undecided_namespace>:some_variable`\n- `:if` and `:endif`";
          var config, expression, namespace, ref, template;
          ref = el.attr("href").slice(1).split(":"), namespace = ref[0], expression = ref[1];
          template = _.template(el.text(), null, {
            interpolate: this.RE_INTERPOLATE
          });
          switch (expression) {
            case "":
              config = {
                type: "output",
                template: template
              };
              break;
            case "if":
            case "endif":
              config = {
                type: expression,
                template: template
              };
              break;
            default:
              config = {
                type: "variable",
                variable: expression,
                template: template
              };
          }
          return config || {};
        };

        TangleView.prototype.withType = function(selection, _type, handler) {
          return selection.filter(function(arg) {
            var type;
            type = arg.type;
            return type === _type;
          }).call(handler);
        };

        TangleView.prototype.onMarkdown = function(evt, arg) {
          var cell, found, tangles, view;
          cell = arg.cell;
          view = this;
          found = d3.select(cell.element[0]).selectAll("a[href^='#']:not(.tangle):not(.anchor-link)").each(function() {
            var it;
            it = d3.select(this);
            return it.datum(view.nodeToConfig(it));
          }).classed({
            tangle: 1
          });
          this.withType(found, "output", this.initOutput);
          this.withType(found, "variable", this.initVariable);
          this.withType(found, "if", this.initIf);
          this.withType(found, "endif", this.initEndIf);
          tangles = d3.select(cell.element[0]).selectAll(".tangle");
          this.withType(tangles, "output", this.updateOutput);
          this.withType(tangles, "variable", this.updateVariable);
          this.withType(tangles, "if", this.updateIf);
          return this.withType(tangles, "endif", this.updateEndIf);
        };

        TangleView.prototype.initOutput = function(field) {
          var view;
          view = this;
          return field.classed({
            tangle_output: 1
          }).text("").style({
            "text-decoration": "none",
            color: "black"
          }).each(function(d) {
            var el;
            el = d3.select(this);
            return view.listenTo(view.model, "change", function() {
              return el.text(d.template(view.model.attributes));
            });
          });
        };

        TangleView.prototype.updateOutput = function(field) {
          return field.text((function(_this) {
            return function(d) {
              return d.template(_this.model.attributes);
            };
          })(this));
        };

        TangleView.prototype.initEndIf = function(field) {
          return field.classed({
            tangle_endif: 1
          }).text("");
        };

        TangleView.prototype.updateEndIf = function(field) {};

        TangleView.prototype.updateIf = function(field) {};

        TangleView.prototype.getStackMatch = function(elFor, pushSel, popSel) {
          var found, stack;
          stack = [];
          found = null;
          d3.selectAll("." + pushSel + ", ." + popSel).each(function() {
            var el, popped;
            if (found) {
              return;
            }
            el = d3.select(this);
            if (el.classed(pushSel)) {
              return stack.push(this);
            } else {
              popped = stack.pop();
              if (popped === elFor) {
                return found = this;
              }
            }
          });
          return found;
        };

        TangleView.prototype.initIf = function(field) {
          var view;
          view = this;
          return field.classed({
            tangle_if: 1
          }).text("").each(function(d) {
            var el;
            el = d3.select(this);
            return view.listenTo(view.model, "change", function() {
              var nodes, range, show;
              show = "true" === d.template(view.model.attributes);
              range = rangy.createRange();
              range.setStart(el.node());
              d.end = d.end || view.getStackMatch(el.node(), "tangle_if", "tangle_endif");
              range.setEnd(d.end);
              nodes = d3.selectAll(range.getNodes());
              nodes.filter(function() {
                return this.nodeType === 3;
              }).each(function() {
                return $(this).wrap("<span></span>");
              });
              return nodes.filter(function() {
                return this.nodeType !== 3;
              }).classed({
                hide: !show
              });
            });
          });
        };

        TangleView.prototype.updateVariable = function(field) {
          var attributes;
          attributes = this.model.attributes;
          return field.text(function(arg) {
            var template;
            template = arg.template;
            return template(attributes);
          });
        };

        TangleView.prototype.initVariable = function(field) {
          var _touch, drag, view;
          view = this;
          _touch = _.debounce(function() {
            return view.touch();
          });
          drag = d3.behavior.drag().on("drag", function(arg) {
            var variable;
            variable = arg.variable;
            view.model.set(variable, d3.event.dx + view.model.get(variable));
            return _touch();
          });
          return field.classed({
            tangle_variable: 1
          }).attr({
            title: "drag"
          }).style({
            cursor: "ew-resize",
            "text-decoration": "none",
            "border-bottom": "dotted 1px blue"
          }).each(this.tooltip).call(drag).each(function(arg) {
            var el, template, variable;
            variable = arg.variable, template = arg.template;
            el = d3.select(this);
            return view.listenTo(view.model, "change:" + variable, function() {
              return el.text(template(view.model.attributes));
            });
          });
        };

        TangleView.prototype.tooltip = function() {
          return $(this).tooltip({
            placement: "bottom",
            container: "body"
          });
        };

        return TangleView;

      })(widget.WidgetView)
    };
  });

}).call(this);
