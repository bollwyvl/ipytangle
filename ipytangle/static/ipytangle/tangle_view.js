// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(["underscore", "widgets/js/widget", "base/js/events", "base/js/namespace"], function(_, widget, events, IPython) {
    var $win, TangleView;
    $win = $(window);
    return {
      TangleView: TangleView = (function(superClass) {
        extend(TangleView, superClass);

        function TangleView() {
          this.bindInput = bind(this.bindInput, this);
          this.onMarkdown = bind(this.onMarkdown, this);
          return TangleView.__super__.constructor.apply(this, arguments);
        }

        TangleView.prototype.EVT = {
          MD: "rendered.MarkdownCell"
        };

        TangleView.prototype.RE_INTERPOLATE = /\{\{(.+?)\}\}/g;

        TangleView.prototype.render = function() {
          events.on(this.EVT.MD, this.onMarkdown);
          return TangleView.__super__.render.apply(this, arguments);
        };

        TangleView.prototype.remove = function() {
          events.off(this.EVT.MD, this.onMarkdown);
          return TangleView.__super__.remove.apply(this, arguments);
        };

        TangleView.prototype.onMarkdown = function(evt, arg) {
          var cell, view;
          cell = arg.cell;
          view = this;
          return cell.element.find("a[href^=#]").each(function(idx, el) {
            var cfg, ref;
            cfg = view.hashToConfig($(el).attr("href"));
            if (cfg && (ref = cfg.variable, indexOf.call(view.model.attributes, ref) >= 0)) {
              return;
            }
            return view.bindInput(cfg, $(el));
          });
        };

        TangleView.prototype.bindInput = function(cfg, el) {
          var _x, drag, endDrag, startDrag, tmpl, tngl, view;
          view = this;
          tmpl = _.template(el.text(), null, {
            interpolate: this.RE_INTERPOLATE
          });
          tngl = $("<button/>", {
            title: "drag",
            "class": "btn btn-link tangle"
          }).text(tmpl(this.model.attributes)).css({
            cursor: "ew-resize",
            "text-decoration": "none",
            "border-bottom": "dotted 1px blue",
            "user-select": "none",
            padding: 0
          }).tooltip({
            placement: "bottom",
            container: "body"
          });
          _x = null;
          drag = (function(_this) {
            return function(arg) {
              var delta, screenX;
              screenX = arg.screenX;
              delta = screenX - _x;
              _x = screenX;
              _this.model.set(cfg.variable, _this.model.get(cfg.variable) + delta);
              return _this.touch();
            };
          })(this);
          startDrag = function(arg) {
            var screenX;
            screenX = arg.screenX;
            _x = screenX;
            return $win.on("mousemove", drag).on("mouseup", endDrag);
          };
          endDrag = function() {
            _x = null;
            return $win.off("mousemove", drag).off("mouseup", endDrag);
          };
          tngl.on("mousedown", startDrag);
          this.listenTo(this.model, "change:" + cfg.variable, (function(_this) {
            return function() {
              return tngl.text(tmpl(_this.model.attributes));
            };
          })(this));
          return el.replaceWith(tngl);
        };

        TangleView.prototype.hashToConfig = function(hash) {
          var bits, config;
          bits = hash.slice(1).split(":");
          config = {};
          switch (bits.length) {
            case 2:
              switch (bits[0]) {
                case "":
                  config.variable = bits[1];
              }
          }
          return config;
        };

        return TangleView;

      })(widget.WidgetView),
      TangleView: TangleView
    };
  });

}).call(this);
