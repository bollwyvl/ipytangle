// Generated by CoffeeScript 1.9.2
(function() {
  define(["underscore"], function(_) {
    return function(view) {
      var classedHidden, i, key, len, ref, results, template;
      classedHidden = function(cls) {
        return function(field) {
          return field.classed("tangle_" + cls, 1).style({
            display: "none"
          });
        };
      };
      template = function(el) {
        return _.template("<%= " + (el.select("code").text()) + " %>");
      };
      this.register("if", {
        init: classedHidden("if"),
        parse: (function(_this) {
          return function(frag, el, extra) {
            if (frag === "if") {
              return {
                type: "if",
                template: template
              };
            }
          };
        })(this),
        update: (function(_this) {
          return function(field) {
            return field.each(function(d) {
              var change, el;
              el = d3.select(this);
              change = function() {
                var current, poppers, prev, pushers, results, show, shown;
                pushers = ["tangle_if", "tangle_else", "tangle_elif"];
                poppers = ["tangle_endif", "tangle_else", "tangle_elif"];
                current = el;
                shown = false;
                show = false;
                results = [];
                while (!current.classed("tangle_endif")) {
                  if (current === el) {
                    show = "true" === d.template(view.context());
                  } else if (current.classed("tangle_elif")) {
                    show = "true" === current.datum().template(view.context());
                  } else if (current.classed("tangle_else")) {
                    show = !shown;
                  }
                  prev = current;
                  current = view.stackMatch(prev, pushers, poppers);
                  view.toggleRange(prev, current, shown ? false : show);
                  results.push(shown = shown || show);
                }
                return results;
              };
              view.listenTo(view.model, "change", change);
              change();
              return change();
            });
          };
        })(this)
      });
      this.register("elif", {
        init: classedHidden("elif"),
        parse: (function(_this) {
          return function(frag, el, extra) {
            if (frag === "elif") {
              return {
                type: "elif",
                template: template
              };
            }
          };
        })(this)
      });
      ref = ["else", "endif"];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        results.push(this.register(key, {
          init: classedHidden(key),
          parse: (function(_this) {
            return function(frag, el, extra) {
              if (frag === key) {
                return {
                  type: key,
                  template: function() {}
                };
              }
            };
          })(this)
        }));
      }
      return results;
    };
  });

}).call(this);
