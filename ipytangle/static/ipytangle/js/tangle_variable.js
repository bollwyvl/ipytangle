// Generated by CoffeeScript 1.9.2
(function() {
  var modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  define(["d3"], function(d3) {
    return function(view) {
      this.register("variable", {
        parse: (function(_this) {
          return function(expression, el, extra) {
            var config, values;
            if (expression === "") {
              return;
            }
            config = {
              type: "variable",
              variable: expression
            };
            values = "_" + expression + "_choices";
            if (values in _this.model.attributes) {
              config.choices = function() {
                return _this.model.get(values);
              };
            }
            return config;
          };
        })(this),
        update: (function(_this) {
          return function(field) {
            return field.each(function(arg) {
              var template;
              template = arg.template;
              return template(view.context());
            }).each(function(arg) {
              var el, template, variable;
              variable = arg.variable, template = arg.template;
              el = d3.select(this);
              return view.listenTo(view.model, "change:" + variable, function() {
                return template(view.context());
              });
            });
          };
        })(this),
        init: (function(_this) {
          return function(field) {
            field.classed({
              tangle_variable: 1
            }).style({
              "text-decoration": "none",
              "border-bottom": "dotted 1px blue"
            });
            field.filter(function(arg) {
              var choices, variable;
              choices = arg.choices, variable = arg.variable;
              return !choices && typeof view.model.attributes[variable] === "number";
            }).call(_this.initVariableNumeric);
            field.filter(function(arg) {
              var choices;
              choices = arg.choices;
              return choices;
            }).call(_this.initVariableChoices);
            return field.each(_this.tooltip);
          };
        })(this)
      });
      this.initVariableChoices = (function(_this) {
        return function(field) {
          return field.attr({
            title: "click"
          }).on("click", function(d) {
            var choices, old, old_idx;
            old = _this.model.get(d.variable);
            choices = d.choices();
            old_idx = choices.indexOf(old);
            _this.model.set(d.variable, choices[modulo(old_idx + 1, choices.length)]);
            return _this.touch();
          });
        };
      })(this);
      return this.initVariableNumeric = (function(_this) {
        return function(field) {
          var _touch, drag;
          _touch = _.debounce(function() {
            return _this.touch();
          });
          drag = d3.behavior.drag().on("drag", function(d) {
            var old;
            old = _this.model.get(d.variable);
            _this.model.set(d.variable, d3.event.dx + old);
            return _touch();
          });
          return field.attr({
            title: "drag"
          }).style({
            cursor: "ew-resize"
          }).call(drag);
        };
      })(this);
    };
  });

}).call(this);
